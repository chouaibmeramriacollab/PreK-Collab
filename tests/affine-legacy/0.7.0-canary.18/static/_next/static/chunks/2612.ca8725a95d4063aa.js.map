{"version":3,"file":"static/chunks/2612.ca8725a95d4063aa.js","mappings":"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","sources":["webpack://_N_E/./src/components/affine/create-workspace-modal/index.css.ts","webpack://_N_E/./src/components/affine/create-workspace-modal/index.tsx","webpack://_N_E/../../node_modules/@vanilla-extract/webpack-plugin/extracted.js?3163","webpack://_N_E/<anon>"],"sourcesContent":["import \"src/components/affine/create-workspace-modal/index.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/components/affine/create-workspace-modal/index.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll83NmpvazcwIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgaGVpZ2h0OiA0NHB4Owp9Ci5fNzZqb2s3MSB7CiAgcGFkZGluZzogMCA0MHB4OwogIGZvbnQtc2l6ZTogMThweDsKICBsaW5lLWhlaWdodDogMjZweDsKfQouXzc2am9rNzEgcCB7CiAgbWFyZ2luLXRvcDogMTJweDsKICBtYXJnaW4tYm90dG9tOiAxNnB4Owp9Ci5fNzZqb2s3MiB7CiAgZm9udC1zaXplOiAyMHB4OwogIGxpbmUtaGVpZ2h0OiAyOHB4OwogIGZvbnQtd2VpZ2h0OiA2MDA7CiAgcGFkZGluZy1ib3R0b206IDE2cHg7Cn0KLl83NmpvazczIHsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7CiAgZ2FwOiAyMHB4OwogIG1hcmdpbjogMjRweCAwOwp9Ci5fNzZqb2s3NCB7CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogIGdhcDogOHB4Owp9Ci5fNzZqb2s3NSB7CiAgY3Vyc29yOiBwb2ludGVyOwogIGFwcGVhcmFuY2U6IGF1dG87CiAgbWFyZ2luLXJpZ2h0OiAxMnB4Owp9\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var buttonGroup = '_76jok73';\nexport var content = '_76jok71';\nexport var contentTitle = '_76jok72';\nexport var header = '_76jok70';\nexport var radio = '_76jok75';\nexport var radioGroup = '_76jok74';","import {\n  Button,\n  Input,\n  Modal,\n  ModalCloseButton,\n  ModalWrapper,\n  toast,\n  Tooltip,\n} from '@affine/component';\nimport { DebugLogger } from '@affine/debug';\nimport { config } from '@affine/env';\nimport { useAFFiNEI18N } from '@affine/i18n/hooks';\nimport { HelpIcon } from '@blocksuite/icons';\nimport { useSetAtom } from 'jotai';\nimport type { KeyboardEvent } from 'react';\nimport { useEffect } from 'react';\nimport { useLayoutEffect } from 'react';\nimport { useCallback, useRef, useState } from 'react';\n\nimport { openDisableCloudAlertModalAtom } from '../../../atoms';\nimport { useAppHelper } from '../../../hooks/use-workspaces';\nimport * as style from './index.css';\n\ntype CreateWorkspaceStep =\n  | 'set-db-location'\n  | 'name-workspace'\n  | 'set-syncing-mode';\n\nexport type CreateWorkspaceMode = 'add' | 'new' | false;\n\nconst logger = new DebugLogger('CreateWorkspaceModal');\n\ninterface ModalProps {\n  mode: CreateWorkspaceMode; // false means not open\n  onClose: () => void;\n  onCreate: (id: string) => void;\n}\n\ninterface NameWorkspaceContentProps {\n  onClose: () => void;\n  onConfirmName: (name: string) => void;\n}\n\nconst NameWorkspaceContent = ({\n  onConfirmName,\n  onClose,\n}: NameWorkspaceContentProps) => {\n  const [workspaceName, setWorkspaceName] = useState('');\n  const isComposition = useRef(false);\n\n  const handleCreateWorkspace = useCallback(() => {\n    onConfirmName(workspaceName);\n  }, [onConfirmName, workspaceName]);\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Enter' && workspaceName && !isComposition.current) {\n        handleCreateWorkspace();\n      }\n    },\n    [handleCreateWorkspace, workspaceName]\n  );\n  const t = useAFFiNEI18N();\n  return (\n    <div className={style.content}>\n      <div className={style.contentTitle}>{t['Name Your Workspace']()}</div>\n      <p>{t['Workspace description']()}</p>\n      <Input\n        ref={ref => {\n          if (ref) {\n            setTimeout(() => ref.focus(), 0);\n          }\n        }}\n        data-testid=\"create-workspace-input\"\n        onKeyDown={handleKeyDown}\n        placeholder={t['Set a Workspace name']()}\n        maxLength={64}\n        minLength={0}\n        onChange={setWorkspaceName}\n        onCompositionStart={() => {\n          isComposition.current = true;\n        }}\n        onCompositionEnd={() => {\n          isComposition.current = false;\n        }}\n      />\n      <div className={style.buttonGroup}>\n        <Button\n          data-testid=\"create-workspace-close-button\"\n          type=\"light\"\n          onClick={onClose}\n        >\n          {t.Cancel()}\n        </Button>\n        <Button\n          data-testid=\"create-workspace-create-button\"\n          disabled={!workspaceName}\n          style={{\n            opacity: !workspaceName ? 0.5 : 1,\n          }}\n          type=\"primary\"\n          onClick={handleCreateWorkspace}\n        >\n          {t.Create()}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\ninterface SetDBLocationContentProps {\n  onConfirmLocation: (dir?: string) => void;\n}\n\nconst useDefaultDBLocation = () => {\n  const [defaultDBLocation, setDefaultDBLocation] = useState('');\n\n  useEffect(() => {\n    window.apis?.db\n      .getDefaultStorageLocation()\n      .then(dir => {\n        setDefaultDBLocation(dir);\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  }, []);\n\n  return defaultDBLocation;\n};\n\nconst SetDBLocationContent = ({\n  onConfirmLocation,\n}: SetDBLocationContentProps) => {\n  const t = useAFFiNEI18N();\n  const defaultDBLocation = useDefaultDBLocation();\n  const [opening, setOpening] = useState(false);\n\n  const handleSelectDBFileLocation = useCallback(() => {\n    if (opening) {\n      return;\n    }\n    setOpening(true);\n    (async function () {\n      const result = await window.apis?.dialog.selectDBFileLocation();\n      setOpening(false);\n      if (result?.filePath) {\n        onConfirmLocation(result.filePath);\n      } else if (result?.error) {\n        // @ts-expect-error: result.error is dynamic so the type is unknown\n        toast(t[result.error]());\n      }\n    })().catch(err => {\n      logger.error(err);\n    });\n  }, [onConfirmLocation, opening, t]);\n\n  return (\n    <div className={style.content}>\n      <div className={style.contentTitle}>{t['Set database location']()}</div>\n      <p>{t['Workspace database storage description']()}</p>\n      <div className={style.buttonGroup}>\n        <Button\n          disabled={opening}\n          data-testid=\"create-workspace-customize-button\"\n          type=\"light\"\n          onClick={handleSelectDBFileLocation}\n        >\n          {t['Customize']()}\n        </Button>\n        <Tooltip\n          zIndex={1000}\n          content={t['Default db location hint']({\n            location: defaultDBLocation,\n          })}\n          placement=\"top-start\"\n        >\n          <Button\n            data-testid=\"create-workspace-default-location-button\"\n            type=\"primary\"\n            onClick={() => {\n              onConfirmLocation();\n            }}\n            icon={<HelpIcon />}\n            iconPosition=\"end\"\n          >\n            {t['Default Location']()}\n          </Button>\n        </Tooltip>\n      </div>\n    </div>\n  );\n};\n\ninterface SetSyncingModeContentProps {\n  mode: CreateWorkspaceMode;\n  onConfirmMode: (enableCloudSyncing: boolean) => void;\n}\n\nconst SetSyncingModeContent = ({\n  mode,\n  onConfirmMode,\n}: SetSyncingModeContentProps) => {\n  const t = useAFFiNEI18N();\n  const [enableCloudSyncing, setEnableCloudSyncing] = useState(false);\n  return (\n    <div className={style.content}>\n      <div className={style.contentTitle}>\n        {t[mode === 'new' ? 'Created Successfully' : 'Added Successfully']()}\n      </div>\n\n      <div className={style.radioGroup}>\n        <label onClick={() => setEnableCloudSyncing(false)}>\n          <input\n            className={style.radio}\n            type=\"radio\"\n            readOnly\n            checked={!enableCloudSyncing}\n          />\n          {t['Use on current device only']()}\n        </label>\n        <label onClick={() => setEnableCloudSyncing(true)}>\n          <input\n            className={style.radio}\n            type=\"radio\"\n            readOnly\n            checked={enableCloudSyncing}\n          />\n          {t['Sync across devices with AFFiNE Cloud']()}\n        </label>\n      </div>\n\n      <div className={style.buttonGroup}>\n        <Button\n          data-testid=\"create-workspace-continue-button\"\n          type=\"primary\"\n          onClick={() => {\n            onConfirmMode(enableCloudSyncing);\n          }}\n        >\n          {t['Continue']()}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport const CreateWorkspaceModal = ({\n  mode,\n  onClose,\n  onCreate,\n}: ModalProps) => {\n  const { createLocalWorkspace, addLocalWorkspace } = useAppHelper();\n  const [step, setStep] = useState<CreateWorkspaceStep>();\n  const [addedId, setAddedId] = useState<string>();\n  const [workspaceName, setWorkspaceName] = useState<string>();\n  const [dbFileLocation, setDBFileLocation] = useState<string>();\n  const setOpenDisableCloudAlertModal = useSetAtom(\n    openDisableCloudAlertModalAtom\n  );\n  const t = useAFFiNEI18N();\n\n  // todo: maybe refactor using xstate?\n  useLayoutEffect(() => {\n    let canceled = false;\n    // if mode changed, reset step\n    if (mode === 'add') {\n      // a hack for now\n      // when adding a workspace, we will immediately let user select a db file\n      // after it is done, it will effectively add a new workspace to app-data folder\n      // so after that, we will be able to load it via importLocalWorkspace\n      (async () => {\n        if (!window.apis) {\n          return;\n        }\n        logger.info('load db file');\n        setStep(undefined);\n        const result = await window.apis.dialog.loadDBFile();\n        if (result.workspaceId && !canceled) {\n          setAddedId(result.workspaceId);\n          setStep('set-syncing-mode');\n        } else if (result.error || result.canceled) {\n          if (result.error) {\n            // @ts-expect-error: result.error is dynamic so the type is unknown\n            toast(t[result.error]());\n          }\n          onClose();\n        }\n      })().catch(err => {\n        console.error(err);\n      });\n    } else if (mode === 'new') {\n      setStep(environment.isDesktop ? 'set-db-location' : 'name-workspace');\n    } else {\n      setStep(undefined);\n    }\n    return () => {\n      canceled = true;\n    };\n  }, [mode, onClose, t]);\n\n  const onConfirmEnableCloudSyncing = useCallback(\n    (enableCloudSyncing: boolean) => {\n      (async function () {\n        if (!config.enableLegacyCloud && enableCloudSyncing) {\n          setOpenDisableCloudAlertModal(true);\n        } else {\n          let id = addedId;\n          // syncing mode is also the last step\n          if (addedId && mode === 'add') {\n            await addLocalWorkspace(addedId);\n          } else if (mode === 'new' && workspaceName) {\n            id = await createLocalWorkspace(workspaceName);\n            // if dbFileLocation is set, move db file to that location\n            if (dbFileLocation) {\n              await window.apis?.dialog.moveDBFile(id, dbFileLocation);\n            }\n          } else {\n            logger.error('invalid state');\n            return;\n          }\n          if (id) {\n            onCreate(id);\n          }\n        }\n      })().catch(e => {\n        logger.error(e);\n      });\n    },\n    [\n      addLocalWorkspace,\n      addedId,\n      createLocalWorkspace,\n      dbFileLocation,\n      mode,\n      onCreate,\n      setOpenDisableCloudAlertModal,\n      workspaceName,\n    ]\n  );\n\n  const onConfirmName = useCallback(\n    (name: string) => {\n      setWorkspaceName(name);\n      if (environment.isDesktop) {\n        setStep('set-syncing-mode');\n      } else {\n        // this will be the last step for web for now\n        // fix me later\n        createLocalWorkspace(name)\n          .then(id => {\n            onCreate(id);\n          })\n          .catch(err => {\n            logger.error(err);\n          });\n      }\n    },\n    [createLocalWorkspace, onCreate]\n  );\n\n  const nameWorkspaceNode =\n    step === 'name-workspace' ? (\n      <NameWorkspaceContent\n        // go to previous step instead?\n        onClose={onClose}\n        onConfirmName={onConfirmName}\n      />\n    ) : null;\n\n  const setDBLocationNode =\n    step === 'set-db-location' ? (\n      <SetDBLocationContent\n        onConfirmLocation={dir => {\n          setDBFileLocation(dir);\n          setStep('name-workspace');\n        }}\n      />\n    ) : null;\n\n  const setSyncingModeNode =\n    step === 'set-syncing-mode' ? (\n      <SetSyncingModeContent\n        mode={mode}\n        onConfirmMode={onConfirmEnableCloudSyncing}\n      />\n    ) : null;\n\n  return (\n    <Modal open={mode !== false && !!step} onClose={onClose}>\n      <ModalWrapper width={560} style={{ padding: '10px' }}>\n        <div className={style.header}>\n          <ModalCloseButton top={6} right={6} onClick={onClose} />\n        </div>\n        {nameWorkspaceNode}\n        {setDBLocationNode}\n        {setSyncingModeNode}\n      </ModalWrapper>\n    </Modal>\n  );\n};\n","// extracted by mini-css-extract-plugin"],"names":["buttonGroup","content","contentTitle","index_css_radio","logger","DebugLogger","NameWorkspaceContent","onConfirmName","onClose","param","workspaceName","setWorkspaceName","useState","isComposition","useRef","handleCreateWorkspace","useCallback","handleKeyDown","event","key","current","t","useAFFiNEI18N","emotion_react_jsx_runtime_browser_esm","BX","div","className","style","tZ","p","Input","ref","setTimeout","focus","data-testid","onKeyDown","placeholder","maxLength","minLength","onChange","onCompositionStart","onCompositionEnd","Button","type","onClick","Cancel","disabled","opacity","Create","useDefaultDBLocation","defaultDBLocation","setDefaultDBLocation","useEffect","window","apis","db","getDefaultStorageLocation","then","dir","catch","err","console","error","SetDBLocationContent","onConfirmLocation","opening","setOpening","handleSelectDBFileLocation","result","dialog","selectDBFileLocation","filePath","toast","Tooltip","zIndex","location","placement","icon","HelpIcon","iconPosition","SetSyncingModeContent","mode","onConfirmMode","enableCloudSyncing","setEnableCloudSyncing","label","input","readOnly","checked","CreateWorkspaceModal","onCreate","createLocalWorkspace","addLocalWorkspace","useAppHelper","step","setStep","addedId","setAddedId","dbFileLocation","setDBFileLocation","setOpenDisableCloudAlertModal","useSetAtom","openDisableCloudAlertModalAtom","useLayoutEffect","canceled","info","undefined","loadDBFile","workspaceId","environment","isDesktop","onConfirmEnableCloudSyncing","config","id","moveDBFile","e","name","nameWorkspaceNode","setDBLocationNode","setSyncingModeNode","Modal","open","ModalWrapper","width","padding","ModalCloseButton","top","right"],"sourceRoot":""}