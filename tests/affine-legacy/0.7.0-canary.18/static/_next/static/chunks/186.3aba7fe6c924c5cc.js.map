{"version":3,"file":"static/chunks/186.3aba7fe6c924c5cc.js","mappings":"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","sources":["webpack://_N_E/../../node_modules/idb-keyval/dist/index.js","webpack://_N_E/<anon>"],"sourcesContent":["function promisifyRequest(request) {\n    return new Promise((resolve, reject) => {\n        // @ts-ignore - file size hacks\n        request.oncomplete = request.onsuccess = () => resolve(request.result);\n        // @ts-ignore - file size hacks\n        request.onabort = request.onerror = () => reject(request.error);\n    });\n}\nfunction createStore(dbName, storeName) {\n    const request = indexedDB.open(dbName);\n    request.onupgradeneeded = () => request.result.createObjectStore(storeName);\n    const dbp = promisifyRequest(request);\n    return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));\n}\nlet defaultGetStoreFunc;\nfunction defaultGetStore() {\n    if (!defaultGetStoreFunc) {\n        defaultGetStoreFunc = createStore('keyval-store', 'keyval');\n    }\n    return defaultGetStoreFunc;\n}\n/**\n * Get a value by its key.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction get(key, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => promisifyRequest(store.get(key)));\n}\n/**\n * Set a value with a key.\n *\n * @param key\n * @param value\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction set(key, value, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.put(value, key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Set multiple values at once. This is faster than calling set() multiple times.\n * It's also atomic â€“ if one of the pairs can't be added, none will be added.\n *\n * @param entries Array of entries, where each entry is an array of `[key, value]`.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction setMany(entries, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        entries.forEach((entry) => store.put(entry[1], entry[0]));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Get multiple values by their keys\n *\n * @param keys\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction getMany(keys, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => Promise.all(keys.map((key) => promisifyRequest(store.get(key)))));\n}\n/**\n * Update a value. This lets you see the old value and update it as an atomic operation.\n *\n * @param key\n * @param updater A callback that takes the old value and returns a new value.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction update(key, updater, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => \n    // Need to create the promise manually.\n    // If I try to chain promises, the transaction closes in browsers\n    // that use a promise polyfill (IE10/11).\n    new Promise((resolve, reject) => {\n        store.get(key).onsuccess = function () {\n            try {\n                store.put(updater(this.result), key);\n                resolve(promisifyRequest(store.transaction));\n            }\n            catch (err) {\n                reject(err);\n            }\n        };\n    }));\n}\n/**\n * Delete a particular key from the store.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction del(key, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.delete(key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Delete multiple keys at once.\n *\n * @param keys List of keys to delete.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction delMany(keys, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        keys.forEach((key) => store.delete(key));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Clear all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction clear(customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.clear();\n        return promisifyRequest(store.transaction);\n    });\n}\nfunction eachCursor(store, callback) {\n    store.openCursor().onsuccess = function () {\n        if (!this.result)\n            return;\n        callback(this.result);\n        this.result.continue();\n    };\n    return promisifyRequest(store.transaction);\n}\n/**\n * Get all keys in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction keys(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        if (store.getAllKeys) {\n            return promisifyRequest(store.getAllKeys());\n        }\n        const items = [];\n        return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);\n    });\n}\n/**\n * Get all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction values(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        if (store.getAll) {\n            return promisifyRequest(store.getAll());\n        }\n        const items = [];\n        return eachCursor(store, (cursor) => items.push(cursor.value)).then(() => items);\n    });\n}\n/**\n * Get all entries in the store. Each entry is an array of `[key, value]`.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction entries(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        // (although, hopefully we'll get a simpler path some day)\n        if (store.getAll && store.getAllKeys) {\n            return Promise.all([\n                promisifyRequest(store.getAllKeys()),\n                promisifyRequest(store.getAll()),\n            ]).then(([keys, values]) => keys.map((key, i) => [key, values[i]]));\n        }\n        const items = [];\n        return customStore('readonly', (store) => eachCursor(store, (cursor) => items.push([cursor.key, cursor.value])).then(() => items));\n    });\n}\n\nexport { clear, createStore, del, delMany, entries, get, getMany, keys, promisifyRequest, set, setMany, update, values };\n"],"names":["defaultGetStoreFunc","promisifyRequest","request","Promise","resolve","reject","oncomplete","onsuccess","result","onabort","onerror","error","createStore","dbName","storeName","indexedDB","open","onupgradeneeded","createObjectStore","dbp","txMode","callback","then","db","transaction","objectStore","defaultGetStore","get","key","customStore","store","set","value","put","setMany","entries","forEach","entry","getMany","keys","all","map","update","updater","err","del","delete","delMany","clear","eachCursor","openCursor","continue","getAllKeys","items","push","cursor","values","getAll","i"],"sourceRoot":""}