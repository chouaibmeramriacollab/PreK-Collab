{"version":3,"file":"static/chunks/pages/workspace/[workspaceId]/setting-cd641873ae3b8ffe.js","mappings":"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","sources":["webpack://_N_E/?f357","webpack://_N_E/./src/hooks/root/use-on-transform-workspace.ts","webpack://_N_E/./src/hooks/use-transform-workspace.ts","webpack://_N_E/./src/pages/workspace/[workspaceId]/setting.tsx","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/workspace/[workspaceId]/setting\",\n      function () {\n        return require(\"private-next-pages/workspace/[workspaceId]/setting.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/workspace/[workspaceId]/setting\"])\n      });\n    }\n  ","import type { WorkspaceRegistry } from '@affine/env/workspace';\nimport { WorkspaceFlavour } from '@affine/env/workspace';\nimport { currentAffineUserAtom } from '@affine/workspace/affine/atom';\nimport {\n  getLoginStorage,\n  parseIdToken,\n  setLoginStorage,\n  SignMethod,\n  storageChangeSlot,\n} from '@affine/workspace/affine/login';\nimport { affineAuth } from '@affine/workspace/affine/shared';\nimport { rootCurrentWorkspaceIdAtom } from '@affine/workspace/atom';\nimport { useSetAtom } from 'jotai';\nimport { useCallback } from 'react';\n\nimport { useTransformWorkspace } from '../use-transform-workspace';\n\nexport function useOnTransformWorkspace() {\n  const transformWorkspace = useTransformWorkspace();\n  const setUser = useSetAtom(currentAffineUserAtom);\n  const setWorkspaceId = useSetAtom(rootCurrentWorkspaceIdAtom);\n  return useCallback(\n    async <From extends WorkspaceFlavour, To extends WorkspaceFlavour>(\n      from: From,\n      to: To,\n      workspace: WorkspaceRegistry[From]\n    ): Promise<void> => {\n      const needRefresh = to === WorkspaceFlavour.AFFINE && !getLoginStorage();\n      if (needRefresh) {\n        const response = await affineAuth.generateToken(SignMethod.Google);\n        if (response) {\n          setLoginStorage(response);\n          setUser(parseIdToken(response.token));\n          storageChangeSlot.emit();\n        }\n      }\n      const workspaceId = await transformWorkspace(from, to, workspace);\n      window.dispatchEvent(\n        new CustomEvent('affine-workspace:transform', {\n          detail: {\n            from,\n            to,\n            oldId: workspace.id,\n            newId: workspaceId,\n          },\n        })\n      );\n      setWorkspaceId(workspaceId);\n    },\n    [setUser, setWorkspaceId, transformWorkspace]\n  );\n}\n\ndeclare global {\n  // global Events\n  interface WindowEventMap {\n    'affine-workspace:transform': CustomEvent<{\n      from: WorkspaceFlavour;\n      to: WorkspaceFlavour;\n      oldId: string;\n      newId: string;\n    }>;\n  }\n}\n","import type { WorkspaceFlavour } from '@affine/env/workspace';\nimport type { WorkspaceRegistry } from '@affine/env/workspace';\nimport { rootWorkspacesMetadataAtom } from '@affine/workspace/atom';\nimport { useSetAtom } from 'jotai';\nimport { useCallback } from 'react';\n\nimport { WorkspaceAdapters } from '../adapters/workspace';\n\n/**\n * Transform workspace from one flavour to another\n *\n * The logic here is to delete the old workspace and create a new one.\n */\nexport function useTransformWorkspace() {\n  const set = useSetAtom(rootWorkspacesMetadataAtom);\n  return useCallback(\n    async <From extends WorkspaceFlavour, To extends WorkspaceFlavour>(\n      from: From,\n      to: To,\n      workspace: WorkspaceRegistry[From]\n    ): Promise<string> => {\n      // create first, then delete, in case of failure\n      const newId = await WorkspaceAdapters[to].CRUD.create(\n        workspace.blockSuiteWorkspace\n      );\n      await WorkspaceAdapters[from].CRUD.delete(workspace as any);\n      set(workspaces => {\n        const idx = workspaces.findIndex(ws => ws.id === workspace.id);\n        workspaces.splice(idx, 1, {\n          id: newId,\n          flavour: to,\n        });\n        return [...workspaces];\n      });\n      return newId;\n    },\n    [set]\n  );\n}\n","import type { SettingPanel } from '@affine/env/workspace';\nimport {\n  settingPanel,\n  settingPanelValues,\n  WorkspaceSubPath,\n} from '@affine/env/workspace';\nimport { useAFFiNEI18N } from '@affine/i18n/hooks';\nimport { assertExists } from '@blocksuite/store';\nimport { useAtom } from 'jotai';\nimport { atomWithStorage } from 'jotai/utils';\nimport Head from 'next/head';\nimport type { NextRouter } from 'next/router';\nimport { useRouter } from 'next/router';\nimport React, { useCallback } from 'react';\n\nimport { getUIAdapter } from '../../../adapters/workspace';\nimport { PageLoading } from '../../../components/pure/loading';\nimport { useCurrentWorkspace } from '../../../hooks/current/use-current-workspace';\nimport { useOnTransformWorkspace } from '../../../hooks/root/use-on-transform-workspace';\nimport { useAppHelper } from '../../../hooks/use-workspaces';\nimport { WorkspaceLayout } from '../../../layouts/workspace-layout';\nimport type { NextPageWithLayout } from '../../../shared';\n\nconst settingPanelAtom = atomWithStorage<SettingPanel>(\n  'workspaceId',\n  settingPanel.General\n);\n\nfunction useTabRouterSync(\n  router: NextRouter,\n  currentTab: SettingPanel,\n  setCurrentTab: (tab: SettingPanel) => void\n): void {\n  if (!router.isReady) {\n    return;\n  }\n  const queryCurrentTab =\n    typeof router.query.currentTab === 'string'\n      ? router.query.currentTab\n      : null;\n  if (\n    (queryCurrentTab !== null &&\n      settingPanelValues.indexOf(queryCurrentTab as SettingPanel) === -1) ||\n    settingPanelValues.indexOf(currentTab as SettingPanel) === -1\n  ) {\n    setCurrentTab(settingPanel.General);\n    router\n      .replace({\n        pathname: router.pathname,\n        query: {\n          ...router.query,\n          currentTab: settingPanel.General,\n        },\n      })\n      .catch(console.error);\n  } else if (queryCurrentTab !== currentTab) {\n    router\n      .replace({\n        pathname: router.pathname,\n        query: {\n          ...router.query,\n          currentTab: currentTab,\n        },\n      })\n      .catch(console.error);\n  }\n}\n\nconst SettingPage: NextPageWithLayout = () => {\n  const router = useRouter();\n  const [currentWorkspace] = useCurrentWorkspace();\n  const t = useAFFiNEI18N();\n  const [currentTab, setCurrentTab] = useAtom(settingPanelAtom);\n  const onChangeTab = useCallback(\n    (tab: SettingPanel) => {\n      setCurrentTab(tab as SettingPanel);\n      router\n        .push({\n          pathname: router.pathname,\n          query: {\n            ...router.query,\n            currentTab: tab,\n          },\n        })\n        .catch(err => {\n          console.error(err);\n        });\n    },\n    [router, setCurrentTab]\n  );\n\n  useTabRouterSync(router, currentTab, setCurrentTab);\n\n  const helper = useAppHelper();\n\n  const onDeleteWorkspace = useCallback(async () => {\n    assertExists(currentWorkspace);\n    const workspaceId = currentWorkspace.id;\n    return helper.deleteWorkspace(workspaceId);\n  }, [currentWorkspace, helper]);\n  const onTransformWorkspace = useOnTransformWorkspace();\n  if (\n    !router.isReady ||\n    currentWorkspace === null ||\n    settingPanelValues.indexOf(currentTab as SettingPanel) === -1\n  ) {\n    return <PageLoading />;\n  }\n  const { SettingsDetail, Header } = getUIAdapter(currentWorkspace.flavour);\n  return (\n    <>\n      <Head>\n        <title>{t['Settings']()} - AFFiNE</title>\n      </Head>\n      <Header\n        currentWorkspace={currentWorkspace}\n        currentEntry={{\n          subPath: WorkspaceSubPath.SETTING,\n        }}\n      />\n      <SettingsDetail\n        onTransformWorkspace={onTransformWorkspace}\n        onDeleteWorkspace={onDeleteWorkspace}\n        currentWorkspace={currentWorkspace}\n        currentTab={currentTab as SettingPanel}\n        onChangeTab={onChangeTab}\n      />\n    </>\n  );\n};\n\nexport default SettingPage;\n\nSettingPage.getLayout = page => {\n  return <WorkspaceLayout>{page}</WorkspaceLayout>;\n};\n"],"names":["window","__NEXT_P","push","__webpack_require__","useOnTransformWorkspace","transformWorkspace","useTransformWorkspace","setUser","useSetAtom","currentAffineUserAtom","setWorkspaceId","rootCurrentWorkspaceIdAtom","useCallback","from","to","workspace","needRefresh","WorkspaceFlavour","getLoginStorage","response","affineAuth","SignMethod","setLoginStorage","parseIdToken","token","storageChangeSlot","workspaceId","dispatchEvent","CustomEvent","detail","oldId","id","newId","set","rootWorkspacesMetadataAtom","WorkspaceAdapters","CRUD","create","blockSuiteWorkspace","delete","workspaces","idx","findIndex","ws","splice","flavour","settingPanelAtom","atomWithStorage","settingPanel","SettingPage","router","useRouter","currentWorkspace","useCurrentWorkspace","t","useAFFiNEI18N","currentTab","setCurrentTab","useAtom","onChangeTab","tab","pathname","query","catch","err","console","error","useTabRouterSync","isReady","queryCurrentTab","settingPanelValues","replace","helper","useAppHelper","onDeleteWorkspace","assertExists","deleteWorkspace","onTransformWorkspace","_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_14__","tZ","PageLoading","SettingsDetail","Header","getUIAdapter","BX","HY","Head","title","currentEntry","subPath","WorkspaceSubPath","__webpack_exports__","getLayout","page","WorkspaceLayout"],"sourceRoot":""}