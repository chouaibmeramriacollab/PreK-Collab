{"version":3,"file":"static/chunks/pages/workspace/[workspaceId]/trash-eb7bcee3fcb79c89.js","mappings":"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","sources":["webpack://_N_E/?e940","webpack://_N_E/../../packages/hooks/src/use-block-suite-page-preview.ts","webpack://_N_E/./src/components/blocksuite/block-suite-page-list/index.css.ts","webpack://_N_E/./src/components/blocksuite/block-suite-page-list/utils.tsx","webpack://_N_E/./src/components/blocksuite/block-suite-page-list/index.tsx","webpack://_N_E/./src/pages/workspace/[workspaceId]/trash.tsx","webpack://_N_E/../../node_modules/@vanilla-extract/webpack-plugin/extracted.js?0389","webpack://_N_E/<anon>"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/workspace/[workspaceId]/trash\",\n      function () {\n        return require(\"private-next-pages/workspace/[workspaceId]/trash.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/workspace/[workspaceId]/trash\"])\n      });\n    }\n  ","import type { ParagraphBlockModel } from '@blocksuite/blocks/models';\nimport type { Page } from '@blocksuite/store';\nimport type { Atom } from 'jotai';\nimport { atom } from 'jotai';\n\nconst weakMap = new WeakMap<Page, Atom<string>>();\n\nexport const getPagePreviewText = (page: Page) => {\n  // TODO this is incorrect, since the order of blocks is not guaranteed\n  const paragraphBlocks = page.getBlockByFlavour(\n    'affine:paragraph'\n  ) as ParagraphBlockModel[];\n  const text = paragraphBlocks\n    .slice(0, 10)\n    .map(block => block.text.toString())\n    .join('\\n');\n  return text.slice(0, 30);\n};\n\nexport function useBlockSuitePagePreview(page: Page): Atom<string> {\n  if (weakMap.has(page)) {\n    return weakMap.get(page) as Atom<string>;\n  } else {\n    const baseAtom = atom<string>(getPagePreviewText(page));\n    baseAtom.onMount = set => {\n      const disposable = page.slots.yUpdated.on(() => {\n        set(getPagePreviewText(page));\n      });\n      return () => {\n        disposable.dispose();\n      };\n    };\n    weakMap.set(page, baseAtom);\n    return baseAtom;\n  }\n}\n","import \"src/components/blocksuite/block-suite-page-list/index.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/components/blocksuite/block-suite-page-list/index.css.ts.vanilla.css\\\",\\\"source\\\":\\\"LndyczI3dzAgewogIGhlaWdodDogY2FsYygxMDAlIC0gNTJweCk7Cn0KLndyczI3dzEgewogIGN1cnNvcjogcG9pbnRlcjsKICBjb2xvcjogdmFyKC0tYWZmaW5lLXRleHQtc2Vjb25kYXJ5LWNvbG9yKTsKICBiYWNrZ3JvdW5kOiB2YXIoLS1hZmZpbmUtYmFja2dyb3VuZC1jb2RlLWJsb2NrKTsKICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1hZmZpbmUtYm9yZGVyLWNvbG9yKTsKICBib3JkZXItcmFkaXVzOiA0cHg7CiAgcGFkZGluZzogMCA2cHg7CiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKfQoud3JzMjd3MTpob3ZlciB7CiAgYmFja2dyb3VuZDogdmFyKC0tYWZmaW5lLWhvdmVyLWNvbG9yKTsKfQoud3JzMjd3MiB7CiAgY3Vyc29yOiB0ZXh0Owp9\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var emptyDescButton = 'wrs27w1';\nexport var emptyDescKbd = 'wrs27w2 wrs27w1';\nexport var pageListEmptyStyle = 'wrs27w0';","import { useBlockSuiteWorkspaceHelper } from '@toeverything/hooks/use-block-suite-workspace-helper';\nimport { useAtomValue, useSetAtom } from 'jotai';\nimport { useRouter } from 'next/router';\nimport { useCallback } from 'react';\n\nimport { pageSettingsAtom, setPageModeAtom } from '../../../atoms';\nimport { useRouterHelper } from '../../../hooks/use-router-helper';\nimport type { BlockSuiteWorkspace } from '../../../shared';\n\nexport const usePageHelper = (blockSuiteWorkspace: BlockSuiteWorkspace) => {\n  const router = useRouter();\n  const { openPage } = useRouterHelper(router);\n  const { createPage } = useBlockSuiteWorkspaceHelper(blockSuiteWorkspace);\n  const pageSettings = useAtomValue(pageSettingsAtom);\n  const isPreferredEdgeless = useCallback(\n    (pageId: string) => pageSettings[pageId]?.mode === 'edgeless',\n    [pageSettings]\n  );\n  const setPageMode = useSetAtom(setPageModeAtom);\n  const createPageAndOpen = useCallback(() => {\n    const page = createPage();\n    return openPage(blockSuiteWorkspace.id, page.id);\n  }, [blockSuiteWorkspace.id, createPage, openPage]);\n  const createEdgelessAndOpen = useCallback(() => {\n    const page = createPage();\n    setPageMode(page.id, 'edgeless');\n    return openPage(blockSuiteWorkspace.id, page.id);\n  }, [blockSuiteWorkspace.id, createPage, openPage, setPageMode]);\n  const importFileAndOpen = useCallback(async () => {\n    const { showImportModal } = await import('@blocksuite/blocks');\n    showImportModal({ workspace: blockSuiteWorkspace });\n  }, [blockSuiteWorkspace]);\n  return {\n    createPage: createPageAndOpen,\n    createEdgeless: createEdgelessAndOpen,\n    importFile: importFileAndOpen,\n    isPreferredEdgeless: isPreferredEdgeless,\n  };\n};\n","import { Empty } from '@affine/component';\nimport type { ListData, TrashListData } from '@affine/component/page-list';\nimport {\n  filterByFilterList,\n  PageList,\n  PageListTrashView,\n} from '@affine/component/page-list';\nimport { env } from '@affine/env';\nimport type { View } from '@affine/env/filter';\nimport { Trans } from '@affine/i18n';\nimport { useAFFiNEI18N } from '@affine/i18n/hooks';\nimport { EdgelessIcon, PageIcon } from '@blocksuite/icons';\nimport type { PageMeta } from '@blocksuite/store';\nimport { useBlockSuitePageMeta } from '@toeverything/hooks/use-block-suite-page-meta';\nimport { getPagePreviewText } from '@toeverything/hooks/use-block-suite-page-preview';\nimport { useAtom } from 'jotai';\nimport type React from 'react';\nimport { useMemo } from 'react';\n\nimport { allPageModeSelectAtom } from '../../../atoms';\nimport { useBlockSuiteMetaHelper } from '../../../hooks/affine/use-block-suite-meta-helper';\nimport type { BlockSuiteWorkspace } from '../../../shared';\nimport { toast } from '../../../utils';\nimport { emptyDescButton, emptyDescKbd, pageListEmptyStyle } from './index.css';\nimport { usePageHelper } from './utils';\n\nexport type BlockSuitePageListProps = {\n  blockSuiteWorkspace: BlockSuiteWorkspace;\n  listType: 'all' | 'trash' | 'shared' | 'public';\n  isPublic?: true;\n  onOpenPage: (pageId: string, newTab?: boolean) => void;\n  view?: View;\n};\n\nconst filter = {\n  all: (pageMeta: PageMeta) => !pageMeta.trash,\n  public: (pageMeta: PageMeta) => !pageMeta.trash,\n  trash: (pageMeta: PageMeta, allMetas: PageMeta[]) => {\n    const parentMeta = allMetas.find(m => m.subpageIds?.includes(pageMeta.id));\n    return !parentMeta?.trash && pageMeta.trash;\n  },\n  shared: (pageMeta: PageMeta) => pageMeta.isPublic && !pageMeta.trash,\n};\n\nconst PageListEmpty = (props: {\n  createPage?: () => void;\n  listType: BlockSuitePageListProps['listType'];\n}) => {\n  const { listType, createPage } = props;\n  const t = useAFFiNEI18N();\n\n  const getEmptyDescription = () => {\n    if (listType === 'all') {\n      const CreateNewPageButton = () => (\n        <button className={emptyDescButton} onClick={createPage}>\n          New Page\n        </button>\n      );\n      if (env.isDesktop) {\n        const shortcut = env.isMacOs ? '⌘ + N' : 'Ctrl + N';\n        return (\n          <Trans i18nKey=\"emptyAllPagesClient\">\n            Click on the <CreateNewPageButton /> button Or press\n            <kbd className={emptyDescKbd}>{{ shortcut } as any}</kbd> to create\n            your first page.\n          </Trans>\n        );\n      }\n      return (\n        <Trans i18nKey=\"emptyAllPages\">\n          Click on the\n          <CreateNewPageButton />\n          button to create your first page.\n        </Trans>\n      );\n    }\n    if (listType === 'trash') {\n      return t['emptyTrash']();\n    }\n    if (listType === 'shared') {\n      return t['emptySharedPages']();\n    }\n    return;\n  };\n\n  return (\n    <div className={pageListEmptyStyle}>\n      <Empty\n        title={t['com.affine.emptyDesc']()}\n        description={getEmptyDescription()}\n      />\n    </div>\n  );\n};\n\nexport const BlockSuitePageList: React.FC<BlockSuitePageListProps> = ({\n  blockSuiteWorkspace,\n  onOpenPage,\n  listType,\n  isPublic = false,\n  view,\n}) => {\n  const pageMetas = useBlockSuitePageMeta(blockSuiteWorkspace);\n  const {\n    toggleFavorite,\n    removeToTrash,\n    restoreFromTrash,\n    permanentlyDeletePage,\n    cancelPublicPage,\n  } = useBlockSuiteMetaHelper(blockSuiteWorkspace);\n  const [filterMode] = useAtom(allPageModeSelectAtom);\n  const { createPage, createEdgeless, importFile, isPreferredEdgeless } =\n    usePageHelper(blockSuiteWorkspace);\n  const t = useAFFiNEI18N();\n  const list = useMemo(\n    () =>\n      pageMetas\n        .filter(pageMeta => {\n          if (filterMode === 'all') {\n            return true;\n          }\n          if (filterMode === 'edgeless') {\n            return isPreferredEdgeless(pageMeta.id);\n          }\n          if (filterMode === 'page') {\n            return !isPreferredEdgeless(pageMeta.id);\n          }\n          console.error('unknown filter mode', pageMeta, filterMode);\n          return true;\n        })\n        .filter(pageMeta => {\n          if (!filter[listType](pageMeta, pageMetas)) {\n            return false;\n          }\n          if (!view) {\n            return true;\n          }\n          return filterByFilterList(view.filterList, {\n            'Is Favourited': !!pageMeta.favorite,\n            Created: pageMeta.createDate,\n            Updated: pageMeta.updatedDate ?? pageMeta.createDate,\n          });\n        }),\n    [pageMetas, filterMode, isPreferredEdgeless, listType, view]\n  );\n\n  if (listType === 'trash') {\n    const pageList: TrashListData[] = list.map(pageMeta => {\n      const page = blockSuiteWorkspace.getPage(pageMeta.id);\n      const preview = page ? getPagePreviewText(page) : undefined;\n      return {\n        icon: isPreferredEdgeless(pageMeta.id) ? (\n          <EdgelessIcon />\n        ) : (\n          <PageIcon />\n        ),\n        pageId: pageMeta.id,\n        title: pageMeta.title,\n        preview,\n        createDate: new Date(pageMeta.createDate),\n        trashDate: pageMeta.trashDate\n          ? new Date(pageMeta.trashDate)\n          : undefined,\n        onClickPage: () => onOpenPage(pageMeta.id),\n        onClickRestore: () => {\n          restoreFromTrash(pageMeta.id);\n        },\n        onRestorePage: () => {\n          restoreFromTrash(pageMeta.id);\n          toast(t['restored']({ title: pageMeta.title || 'Untitled' }));\n        },\n        onPermanentlyDeletePage: () => {\n          permanentlyDeletePage(pageMeta.id);\n          toast(t['Permanently deleted']());\n        },\n      };\n    });\n    return (\n      <PageListTrashView\n        list={pageList}\n        fallback={<PageListEmpty listType={listType} />}\n      />\n    );\n  }\n\n  const pageList: ListData[] = list.map(pageMeta => {\n    const page = blockSuiteWorkspace.getPage(pageMeta.id);\n    const preview = page ? getPagePreviewText(page) : undefined;\n    return {\n      icon: isPreferredEdgeless(pageMeta.id) ? <EdgelessIcon /> : <PageIcon />,\n      pageId: pageMeta.id,\n      title: pageMeta.title,\n      preview,\n      favorite: !!pageMeta.favorite,\n      isPublicPage: !!pageMeta.isPublic,\n      createDate: new Date(pageMeta.createDate),\n      updatedDate: new Date(pageMeta.updatedDate ?? pageMeta.createDate),\n      onClickPage: () => onOpenPage(pageMeta.id),\n      onOpenPageInNewTab: () => onOpenPage(pageMeta.id, true),\n      onClickRestore: () => {\n        restoreFromTrash(pageMeta.id);\n      },\n      removeToTrash: () => {\n        removeToTrash(pageMeta.id);\n        toast(t['Successfully deleted']());\n      },\n      onRestorePage: () => {\n        restoreFromTrash(pageMeta.id);\n        toast(t['restored']({ title: pageMeta.title || 'Untitled' }));\n      },\n      bookmarkPage: () => {\n        toggleFavorite(pageMeta.id);\n        toast(\n          pageMeta.favorite\n            ? t['Removed from Favorites']()\n            : t['Added to Favorites']()\n        );\n      },\n      onDisablePublicSharing: () => {\n        cancelPublicPage(pageMeta.id);\n        toast('Successfully disabled', {\n          portal: document.body,\n        });\n      },\n    };\n  });\n\n  return (\n    <PageList\n      onCreateNewPage={createPage}\n      onCreateNewEdgeless={createEdgeless}\n      onImportFile={importFile}\n      isPublicWorkspace={isPublic}\n      list={pageList}\n      fallback={<PageListEmpty createPage={createPage} listType={listType} />}\n    />\n  );\n};\n","import { WorkspaceSubPath } from '@affine/env/workspace';\nimport { useAFFiNEI18N } from '@affine/i18n/hooks';\nimport { assertExists } from '@blocksuite/store';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport React, { useCallback } from 'react';\n\nimport { getUIAdapter } from '../../../adapters/workspace';\nimport { BlockSuitePageList } from '../../../components/blocksuite/block-suite-page-list';\nimport { PageLoading } from '../../../components/pure/loading';\nimport { useCurrentWorkspace } from '../../../hooks/current/use-current-workspace';\nimport { useRouterHelper } from '../../../hooks/use-router-helper';\nimport { WorkspaceLayout } from '../../../layouts/workspace-layout';\nimport type { NextPageWithLayout } from '../../../shared';\n\nconst TrashPage: NextPageWithLayout = () => {\n  const router = useRouter();\n  const { jumpToPage } = useRouterHelper(router);\n  const [currentWorkspace] = useCurrentWorkspace();\n  const t = useAFFiNEI18N();\n  const onClickPage = useCallback(\n    (pageId: string, newTab?: boolean) => {\n      assertExists(currentWorkspace);\n      if (newTab) {\n        window.open(`/workspace/${currentWorkspace?.id}/${pageId}`, '_blank');\n      } else {\n        jumpToPage(currentWorkspace.id, pageId).catch(error => {\n          console.error(error);\n        });\n      }\n    },\n    [currentWorkspace, jumpToPage]\n  );\n  if (!router.isReady || currentWorkspace === null) {\n    return <PageLoading />;\n  }\n  // todo(himself65): refactor to plugin\n  const blockSuiteWorkspace = currentWorkspace.blockSuiteWorkspace;\n  assertExists(blockSuiteWorkspace);\n  const { Header } = getUIAdapter(currentWorkspace.flavour);\n  return (\n    <>\n      <Head>\n        <title>{t['Trash']()} - AFFiNE</title>\n      </Head>\n      <Header\n        currentWorkspace={currentWorkspace}\n        currentEntry={{\n          subPath: WorkspaceSubPath.TRASH,\n        }}\n      />\n      <BlockSuitePageList\n        blockSuiteWorkspace={blockSuiteWorkspace}\n        onOpenPage={onClickPage}\n        listType=\"trash\"\n      />\n    </>\n  );\n};\n\nexport default TrashPage;\n\nTrashPage.getLayout = page => {\n  return <WorkspaceLayout>{page}</WorkspaceLayout>;\n};\n","// extracted by mini-css-extract-plugin"],"names":["window","__NEXT_P","push","__webpack_require__","WeakMap","getPagePreviewText","paragraphBlocks","page","getBlockByFlavour","text","slice","map","block","toString","join","usePageHelper","router","useRouter","openPage","useRouterHelper","createPage","useBlockSuiteWorkspaceHelper","blockSuiteWorkspace","pageSettings","useAtomValue","pageSettingsAtom","isPreferredEdgeless","useCallback","pageId","mode","setPageMode","useSetAtom","setPageModeAtom","createPageAndOpen","id","createEdgelessAndOpen","importFileAndOpen","showImportModal","e","then","bind","workspace","createEdgeless","importFile","filter","all","pageMeta","trash","public","allMetas","parentMeta","find","m","subpageIds","includes","shared","isPublic","PageListEmpty","listType","props","t","useAFFiNEI18N","emotion_react_jsx_runtime_browser_esm","tZ","div","className","Empty","title","description","getEmptyDescription","CreateNewPageButton","button","onClick","env","shortcut","BX","Trans","i18nKey","kbd","BlockSuitePageList","onOpenPage","view","param","pageMetas","useBlockSuitePageMeta","toggleFavorite","removeToTrash","restoreFromTrash","permanentlyDeletePage","cancelPublicPage","useBlockSuiteMetaHelper","filterMode","useAtom","allPageModeSelectAtom","list","useMemo","console","error","filterByFilterList","filterList","favorite","Created","createDate","Updated","updatedDate","pageList","getPage","preview","undefined","icon","EdgelessIcon","PageIcon","Date","trashDate","onClickPage","onClickRestore","onRestorePage","toast","onPermanentlyDeletePage","PageListTrashView","fallback","isPublicPage","onOpenPageInNewTab","bookmarkPage","onDisablePublicSharing","portal","document","body","PageList","onCreateNewPage","onCreateNewEdgeless","onImportFile","isPublicWorkspace","TrashPage","jumpToPage","currentWorkspace","useCurrentWorkspace","newTab","assertExists","open","concat","catch","isReady","_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__","PageLoading","Header","getUIAdapter","flavour","HY","Head","currentEntry","subPath","WorkspaceSubPath","__webpack_exports__","getLayout","WorkspaceLayout"],"sourceRoot":""}