/* eslint-disable @typescript-eslint/no-restricted-imports */
// NOTE: we will generate preload types from this file

import { ipcRenderer } from 'electron';

import type { MainEventMap, MainIPCHandlerMap } from '../../constraints';

type WithoutFirstParameter<T> = T extends (_: any, ...args: infer P) => infer R
  ? (...args: P) => R
  : T;

type HandlersMap<N extends keyof MainIPCHandlerMap> = {
  [K in keyof MainIPCHandlerMap[N]]: WithoutFirstParameter<
    MainIPCHandlerMap[N][K]
  >;
};

type PreloadHandlers = {
  [N in keyof MainIPCHandlerMap]: HandlersMap<N>;
};

// main -> renderer
function ipcCallbackFn<T extends keyof MainEventMap>(eventName: T) {
  return (callback: MainEventMap[T]) => {
    // @ts-expect-error fix me later
    const fn = (_, ...args) => callback(...args);
    ipcRenderer.on(eventName, fn);
    return () => {
      ipcRenderer.off(eventName, fn);
    };
  };
}

const apis: PreloadHandlers = (() => {
  // the following were generated by the build script
  // 1. bundle extra main/src/handlers.ts entry
  // 2. use generate-handlers-meta.mjs to generate handlers-meta.js in dist
  //
  // we cannot directly import main/src/handlers.ts because it will be bundled into the preload bundle
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  const handlersMeta: [string, string[]][] = require('../main/handlers-meta');

  const all = handlersMeta.map(([namespace, functionNames]) => {
    const namespaceApis = functionNames.map(name => {
      const channel = `${namespace}:${name}`;
      return [
        name,
        (...args: any[]) => {
          console.log(
            'Invoke handler',
            channel,
            'with args:',
            ...args.filter(arg => {
              return typeof arg !== 'object';
            })
          );
          return ipcRenderer.invoke(channel, ...args);
        },
      ];
    });
    return [namespace, Object.fromEntries(namespaceApis)];
  });

  return Object.fromEntries(all);
})();

const appInfo = {
  electron: true,
};

const events = {
  onDBFileUpdate: ipcCallbackFn('main:on-db-file-update'),
};

export { apis, appInfo, events };
